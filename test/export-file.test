#!/usr/bin/env sh

. shell/print-text
. shell/terminate
. shell/export-file

echo ""
print-text 12 "Checking if the 'export-file' function works..."
echo ""

exit_code=0
script_path=$(cd "$(dirname "${0}")" || .; pwd)
multi_line_encoded="multi\\nline\\nstring"

multi_line_single_quote='multi
line
string?q=abc123'

multi_line_double_quote="multi
line
string?q=abc123"

expect_value(){
    value=$(eval printf '%s\\n' "\$${1}")

    if [ "${value}" != "${2}" ]; then
        exit_code=127;

        print-text 9 "| The '${1}' variable has an unexpected value"
        print-text 8 "| Expected: $(print-text 10 "${2}")"
        print-text 8 "| Received: $(print-text 10 "${value}")"
        echo ""
    fi
}

# Do not overwrite previously exported variables
export-file \
    "${script_path}"/export-file.env.00 \
    "${script_path}"/export-file.env.01

expect_value 'ENV_VAR' 'FOO1'
expect_value 'ENV_VAR_COMMAND' 'FOO7'
expect_value 'ENV_VAR_DQ_WRAP' 'FOO3'
expect_value 'ENV_VAR_DQ_WRAP_JSON_ESCAPE_NESTED_SQ' "{\'foo\':\'bar\'}"
expect_value 'ENV_VAR_DQ_WRAP_JSON_NESTED_DQ' '{foo:bar}'
expect_value 'ENV_VAR_DQ_WRAP_MULTI_LINE' "${multi_line_double_quote}"
expect_value 'ENV_VAR_DQ_WRAP_NESTED_SQ' "'foo5'"
expect_value 'ENV_VAR_EMPTY' ''
expect_value 'ENV_VAR_ENCODED' 'foo\sbar'
expect_value 'ENV_VAR_ENCODED_MULTI_LINE' "${multi_line_encoded}"
expect_value 'ENV_VAR_SQ_WRAP' 'FOO4'
expect_value 'ENV_VAR_SQ_WRAP_JSON_ESCAPE_NESTED_DQ' '{\"foo\":\"bar\"}'
expect_value 'ENV_VAR_SQ_WRAP_JSON_NESTED_SQ' '{foo:bar}'
expect_value 'ENV_VAR_SQ_WRAP_MULTI_LINE' "${multi_line_single_quote}"
expect_value 'ENV_VAR_SQ_WRAP_NESTED_DQ' '"foo6"'
expect_value 'ENV_VAR_TRIM_WHITESPACE' 'foo8'
expect_value 'ENV_VAR_WITH_EQUALS' 'foo2=qwerty'

# Overwrite previously exported variables
export-file --force "${script_path}"/export-file.env.01
expect_value 'ENV_VAR' 'foo1'
expect_value 'ENV_VAR_COMMAND' 'foo7'
expect_value 'ENV_VAR_DQ_WRAP' 'foo3'
expect_value 'ENV_VAR_SQ_WRAP' 'foo4'

terminate "${exit_code}" "PASS" "FAIL"
