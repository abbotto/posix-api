#!/usr/bin/env sh

# Usage: doc/api.md#export-file

# Create an alias
. ./shell/common/expand-aliases
alias export-file="export_file"

export_file(){
    if [ -z "${1}" ]; then
        printf '%s\n' "export-file: arguments are missing"
        return 127
    fi

	target_env_file=$(mktemp)
	shell_env_file=$(mktemp)
	
	# Use the '-f' or '--force'  flag to
	# overwrite previously exported variables
	if [ "$1" = "-f" ] || [ "$1" = "--force" ] ; then
		shift $(( $# > 0 ? 1 : 0 ))
		eval "rm -rf ${shell_env_file}"
		unset shell_env_file
	fi

	# Loop over input files
	while [ -n "${1:-}" ]; do
    	input_env_file="${1}"
    	shift $(( $# > 0 ? 1 : 0 ))

		if [ ! -f "${input_env_file}" ]; then
			printf '%s\n' "Required resource not found: '${input_env_file}'"
		else
			# Cache existing exported vars in a file so they can be preserved
			# Calling 'set' in POSIX mode returns a list of shell variables
			if [ -n "${shell_env_file}" ]; then set > "${shell_env_file}"; fi
			
			# Remove leading whitespace from unquoted values
			# shellcheck disable=SC2002
			cat "${input_env_file}" | \
			sed -r 's|(=\s\s+)[^A-z0-9_]*|=|g' | \
			tee "${target_env_file}" >/dev/null 2>&1

			# Export the target variables
			set -a
				. "${target_env_file}"

				# Restore previously exported variables that belong to the current process
				if [ -n "${shell_env_file}" ]; then . "${shell_env_file}"; fi
			set +a
		fi
	done

	# Cleanup
	rm -rf "${target_env_file}"
	rm -rf "${shell_env_file}"
}
